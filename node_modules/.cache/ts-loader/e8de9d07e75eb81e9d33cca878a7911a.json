{"remainingRequest":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\service\\AxiosService.ts","dependencies":[{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\service\\AxiosService.ts","mtime":1530608054052},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530186861941},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1530186861915},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\ts-loader\\index.js","mtime":1530127508000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs';\nexport default {\n  init: function init() {},\n  getRootUrl: function getRootUrl() {\n    if (window.location.hostname == 'localhost') {\n      return window.location.protocol + '//' + window.location.hostname + ':' + '8080'; //window.location.port\n    } else {\n      return window.location.protocol + '//' + window.location.hostname;\n    }\n  },\n  getRootUrlWithApi: function getRootUrlWithApi() {\n    return this.getRootUrl() + '/api/';\n  },\n  DEBUG: function DEBUG() {\n    return false;\n  },\n  _request: function _request(url, type, data, success, failure) {\n    var _this = this;\n\n    if (this.DEBUG()) {\n      console.log('[request]\\nurl: ' + url + '\\ndata: ' + data);\n    }\n\n    axios({\n      method: type,\n      url: this.getRootUrlWithApi() + url,\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (_this.DEBUG()) {\n        console.log('성공\\nurl: ' + url + '\\nres:\\n' + JSON.stringify(response.data.data));\n      }\n\n      success(response.data.data);\n    }).catch(function (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        var status = error.response.status;\n        var headers = error.response.headers;\n        var _data = error.response.data;\n        var statusText = error.response.statusText;\n\n        if (_this.DEBUG()) {\n          console.log(headers);\n          console.log(_data);\n          console.log(status); //  console.log(statusText)\n          //  console.log('Error!\\ncode:' + request.status + '\\n' + 'message:' + request.responseText + '\\n' + 'error:' + error)\n        } //  console.log('Status: ' + status);\n        // 401 Error\n\n\n        if (status === 401 || status === 502) {\n          var model = _this; // showOneBtnDialog('장기간 미접속으로 세션이 만료되었습니다. 다시 로그인해주세요.', 'CLOSE', true,\n          //   function () {\n          //     window.location.replace(model.getRootUrl() + '/home')\n          //   })\n        } else {\n          failure();\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error);\n      }\n\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  },\n  _requestWithUrlPram: function _requestWithUrlPram(url, type, data, success, failure) {\n    data = data || {};\n    var prams = qs.stringify(data);\n\n    this._request(url + '?' + prams, type, '', success, failure);\n  },\n  _requestWithPath: function _requestWithPath(path, type, data, success, failure) {\n    data = data || {};\n\n    this._request(path, type, JSON.stringify(data), success, failure);\n  },\n  _requestWithBody: function _requestWithBody(url, type, data, success, failure) {\n    data = data || {};\n\n    this._request(url, type, JSON.stringify(data), success, failure);\n  }\n};",{"version":3,"sources":["C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\service\\AxiosService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport qs from 'qs';\r\nimport MainRepository from \"@/vuex/MainRepository\";\r\n\r\nexport default {\r\n  init: function () {\r\n  },\r\n  getRootUrl: function () {\r\n    if (window.location.hostname == 'localhost') {\r\n      return window.location.protocol + '//' + window.location.hostname + ':' + '8080' //window.location.port\r\n    } else {\r\n      return window.location.protocol + '//' + window.location.hostname\r\n    }\r\n  },\r\n  getRootUrlWithApi: function () {\r\n    return this.getRootUrl() + '/api/'\r\n  },\r\n  DEBUG: function () {\r\n    return false\r\n  },\r\n  _request: function (url: string, type: string, data: any, success: any, failure: any) {\r\n    if (this.DEBUG()) {\r\n      console.log('[request]\\nurl: ' + url + '\\ndata: ' + data)\r\n    }\r\n\r\n    axios({\r\n      method: type,\r\n      url: this.getRootUrlWithApi() + url,\r\n      data: data,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    })\r\n      .then((response) => {\r\n        if (this.DEBUG()) {\r\n          console.log('성공\\nurl: ' + url + '\\nres:\\n' + JSON.stringify(response.data.data))\r\n        }\r\n        success(response.data.data)\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n\r\n          let status = error.response.status;\r\n          let headers = error.response.headers;\r\n          let data = error.response.data;\r\n          let statusText = error.response.statusText;\r\n\r\n          if (this.DEBUG()) {\r\n            console.log(headers);\r\n            console.log(data);\r\n            console.log(status)\r\n            //  console.log(statusText)\r\n            //  console.log('Error!\\ncode:' + request.status + '\\n' + 'message:' + request.responseText + '\\n' + 'error:' + error)\r\n          }\r\n          //  console.log('Status: ' + status);\r\n          // 401 Error\r\n          if (status === 401 || status === 502) {\r\n            let model = this;\r\n            // showOneBtnDialog('장기간 미접속으로 세션이 만료되었습니다. 다시 로그인해주세요.', 'CLOSE', true,\r\n            //   function () {\r\n            //     window.location.replace(model.getRootUrl() + '/home')\r\n            //   })\r\n          } else {\r\n            failure()\r\n          }\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request)\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error)\r\n        }\r\n        console.log(error)\r\n      }).then(() => {\r\n      // always executed\r\n    })\r\n  },\r\n  _requestWithUrlPram: function (url: string, type: string, data: any, success: any, failure: any) {\r\n    data = data || {};\r\n    let prams = qs.stringify(data);\r\n\r\n    this._request(\r\n      url + '?' + prams,\r\n      type,\r\n      '',\r\n      success,\r\n      failure\r\n    )\r\n  },\r\n  _requestWithPath: function (path: string, type: string, data: any, success: any, failure: any) {\r\n    data = data || {};\r\n\r\n    this._request(\r\n      path,\r\n      type,\r\n      JSON.stringify(data),\r\n      success,\r\n      failure\r\n    )\r\n  },\r\n  _requestWithBody: function (url: string, type: string, data: any, success: any, failure: any) {\r\n    data = data || {};\r\n\r\n    this._request(\r\n      url,\r\n      type,\r\n      JSON.stringify(data),\r\n      success,\r\n      failure\r\n    )\r\n  },\r\n\r\n\r\n  // Error 처리 -> 참고 정도만 할것\r\n  // getErrorMessage: function (responseText: any): ErrorModel {\r\n  //   let code = responseText.code;\r\n  //   let serverMessage = responseText.message;\r\n  //   let text = '';\r\n  //   let action = function () {\r\n  //\r\n  //   };\r\n  //   let rootUrl = this.getRootUrl();\r\n  //\r\n  //   switch (Number(code)) {\r\n  //     case 401:\r\n  //       text = '장기간 미접속으로 세션이 만료되었습니다. 다시 로그인해주세요.';\r\n  //       action = function () {\r\n  //         window.location.replace(rootUrl + '/home')\r\n  //       };\r\n  //       break;\r\n  //     default:\r\n  //       text = serverMessage;\r\n  //       break\r\n  //   }\r\n  //\r\n  //   return new ErrorModel(\r\n  //     code, text,\r\n  //     text,\r\n  //     // + '  - ErrorCode(' + code + ')',\r\n  //     action\r\n  //   )\r\n  // },\r\n  // showErrorPopup: function (ErrorModel: ErrorModel) {\r\n  //\r\n  //   if(ErrorModel.code === 9008){\r\n  //     MainRepository.getRouterController().goReferral(ErrorModel.message);\r\n  //   } else {\r\n  //     showOneBtnDialog(ErrorModel.message, 'CLOSE', true,function () {\r\n  //       ErrorModel.action()\r\n  //     });\r\n  //   }\r\n  // },\r\n}\r\n\r\n"],"sourceRoot":""}]}