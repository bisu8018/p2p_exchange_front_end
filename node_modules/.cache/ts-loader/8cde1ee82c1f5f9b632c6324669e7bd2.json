{"remainingRequest":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\common\\utils.ts","dependencies":[{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\common\\utils.ts","mtime":1530789441466},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530186861941},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1530186861915},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\node_modules\\ts-loader\\index.js","mtime":1530127508000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"C:\\\\Users\\\\Dean\\\\git\\\\p2p_exchange\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/typeof\";\nimport \"core-js/modules/es6.regexp.search\";\nexport var abUtils = {\n  // 정수형인지\n  isNaturalNumber: function isNaturalNumber(number) {\n    var regExp = /^\\d*$/;\n    return regExp.test(String(number));\n  },\n  // 정수형인지\n  isInteger: function isInteger(number) {\n    var regExp = /^[+-]?\\d*$/;\n    return regExp.test(String(number));\n  },\n  // 실수형 (소숫점) 인지\n  isDouble: function isDouble(number) {\n    var regExp = /^[+-]?\\d*(\\.?\\d*)$/;\n    return regExp.test(String(number));\n  },\n  // 숫자 (소수점 포함) 인지\n  isNumber: function isNumber(number) {\n    var regExp = /^[-]?\\d+(?:[.]\\d+)?$/;\n    return regExp.test(number);\n  },\n  // 휴대폰 번호\n  isPhone: function isPhone(number) {\n    var regExp = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    var regExp2 = /^\\d{3}\\d{3,4}\\d{4}$/;\n    return regExp.test(number) || regExp2.test(number);\n  },\n  // 아이디\n  isEmail: function isEmail(email) {\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n    return regExp.test(email);\n  },\n  // 비밀번호\n  isPasswd: function isPasswd(passwd) {\n    var pw = passwd;\n    var num = pw.search(/[0-9]/g);\n    var eng = pw.search(/[a-z]/ig);\n    var spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩\";:₩/?]/gi);\n\n    if (pw.length < 8 || pw.length > 20) {\n      return false;\n    } // 공백 체크\n\n\n    if (pw.search(/₩s/) != -1) {\n      return false;\n    } // 영문/숫자/특수문자 중 택2\n    // if ( (num < 0 && eng < 0) || (eng < 0 && spe < 0) || (spe < 0 && num < 0) ){\n    //   return false;\n    // }\n    // 영문/숫자/특수문자 필수\n\n\n    if (num < 0 && eng < 0 && spe < 0) {\n      return false;\n    }\n\n    return true;\n  },\n  // 날짜\n  isDate: function isDate(input) {\n    var regExp = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/;\n    return regExp.test(input);\n  },\n  isDateWithTime: function isDateWithTime(input) {\n    var regExp = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/;\n    var regExp2 = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])\\s([1-9]|[01][0-9]|2[0-3]):([0-5][0-9])$/;\n    return regExp.test(input) || regExp2.test(input);\n  },\n  isEmpty: function isEmpty(value) {\n    return value == \"\" || value == null || value == undefined || value != null && _typeof(value) == \"object\" && !Object.keys(value).length;\n  },\n  toMoneyFormat: function toMoneyFormat(amount) {\n    amount = amount || '';\n    var parts = amount.split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n  }\n};",{"version":3,"sources":["C:\\Users\\Dean\\git\\p2p_exchange\\frontend\\src\\common\\utils.ts"],"names":[],"mappings":";;;;;;;OAAO,IAAI,UAAU;AACnB;AACA,mBAAiB,yBAAU,MAAV,EAAqB;AACpC,QAAI,SAAS,OAAb;AACA,WAAO,OAAO,IAAP,CAAY,OAAO,MAAP,CAAZ,CAAP;AACD,GALkB;AAMnB;AACA,aAAW,mBAAU,MAAV,EAAqB;AAC9B,QAAI,SAAS,YAAb;AACA,WAAO,OAAO,IAAP,CAAY,OAAO,MAAP,CAAZ,CAAP;AACD,GAVkB;AAWnB;AACA,YAAU,kBAAU,MAAV,EAAqB;AAC7B,QAAI,SAAS,oBAAb;AACA,WAAO,OAAO,IAAP,CAAY,OAAO,MAAP,CAAZ,CAAP;AACD,GAfkB;AAgBnB;AACA,YAAU,kBAAU,MAAV,EAAqB;AAC7B,QAAI,SAAS,sBAAb;AACA,WAAO,OAAO,IAAP,CAAY,MAAZ,CAAP;AACD,GApBkB;AAqBnB;AACA,WAAS,iBAAU,MAAV,EAAqB;AAC5B,QAAI,SAAS,uBAAb;AACA,QAAI,UAAU,qBAAd;AACA,WAAO,OAAO,IAAP,CAAY,MAAZ,KAAuB,QAAQ,IAAR,CAAa,MAAb,CAA9B;AACD,GA1BkB;AA2BnB;AACA,WAAS,iBAAU,KAAV,EAAoB;AAC3B,QAAI,SAAS,qFAAb;AACA,WAAO,OAAO,IAAP,CAAY,KAAZ,CAAP;AACD,GA/BkB;AAgCnB;AACA,YAAU,kBAAU,MAAV,EAAqB;AAC7B,QAAI,KAAK,MAAT;AACA,QAAI,MAAM,GAAG,MAAH,CAAU,QAAV,CAAV;AACA,QAAI,MAAM,GAAG,MAAH,CAAU,SAAV,CAAV;AACA,QAAI,MAAM,GAAG,MAAH,CAAU,6BAAV,CAAV;;AAEA,QAAG,GAAG,MAAH,GAAY,CAAZ,IAAiB,GAAG,MAAH,GAAY,EAAhC,EAAmC;AACjC,aAAO,KAAP;AACD,KAR4B,CAS7B;;;AACA,QAAG,GAAG,MAAH,CAAU,IAAV,KAAmB,CAAC,CAAvB,EAAyB;AACvB,aAAO,KAAP;AACD,KAZ4B,CAa7B;AACA;AACA;AACA;AAEA;;;AACC,QAAI,MAAM,CAAN,IAAW,MAAM,CAAjB,IAAsB,MAAM,CAAhC,EAAkC;AAChC,aAAO,KAAP;AACD;;AACF,WAAO,IAAP;AACD,GAxDkB;AAyDnB;AACA,UAAQ,gBAAU,KAAV,EAAoB;AAC1B,QAAI,SAAS,uDAAb;AACA,WAAO,OAAO,IAAP,CAAY,KAAZ,CAAP;AACD,GA7DkB;AA8DnB,kBAAgB,wBAAU,KAAV,EAAoB;AAClC,QAAI,SAAS,uDAAb;AACA,QAAI,UAAU,8FAAd;AACA,WAAO,OAAO,IAAP,CAAY,KAAZ,KAAsB,QAAQ,IAAR,CAAa,KAAb,CAA7B;AACD,GAlEkB;AAmEnB,WAAS,iBAAU,KAAV,EAAoB;AAC3B,WAAS,SAAS,EAAT,IAAe,SAAS,IAAxB,IAAgC,SAAS,SAAzC,IAAwD,SAAS,IAAT,IAAiB,QAAO,KAAP,KAAgB,QAAjC,IAA6C,CAAC,OAAO,IAAP,CAAY,KAAZ,EAAmB,MAAlI;AACD,GArEkB;AAsEnB,iBAAe,uBAAS,MAAT,EAAuB;AACpC,aAAS,UAAU,EAAnB;AACA,QAAI,QAAQ,OAAO,KAAP,CAAa,GAAb,CAAZ;AACA,WAAO,MAAM,CAAN,EAAS,OAAT,CAAiB,uBAAjB,EAA0C,GAA1C,KAAkD,MAAM,CAAN,IAAW,MAAM,MAAM,CAAN,CAAjB,GAA4B,EAA9E,CAAP;AACD;AA1EkB,CAAd","sourcesContent":["export var abUtils = {\r\n  // 정수형인지\r\n  isNaturalNumber: function (number: any) {\r\n    let regExp = /^\\d*$/;\r\n    return regExp.test(String(number));\r\n  },\r\n  // 정수형인지\r\n  isInteger: function (number: any) {\r\n    let regExp = /^[+-]?\\d*$/;\r\n    return regExp.test(String(number));\r\n  },\r\n  // 실수형 (소숫점) 인지\r\n  isDouble: function (number: any) {\r\n    let regExp = /^[+-]?\\d*(\\.?\\d*)$/;\r\n    return regExp.test(String(number));\r\n  },\r\n  // 숫자 (소수점 포함) 인지\r\n  isNumber: function (number: any) {\r\n    let regExp = /^[-]?\\d+(?:[.]\\d+)?$/;\r\n    return regExp.test(number);\r\n  },\r\n  // 휴대폰 번호\r\n  isPhone: function (number: any) {\r\n    let regExp = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n    let regExp2 = /^\\d{3}\\d{3,4}\\d{4}$/;\r\n    return regExp.test(number) || regExp2.test(number);\r\n  },\r\n  // 아이디\r\n  isEmail: function (email: any) {\r\n    let regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\r\n    return regExp.test(email);\r\n  },\r\n  // 비밀번호\r\n  isPasswd: function (passwd: any) {\r\n    let pw = passwd;\r\n    let num = pw.search(/[0-9]/g);\r\n    let eng = pw.search(/[a-z]/ig);\r\n    let spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩\";:₩/?]/gi);\r\n\r\n    if(pw.length < 8 || pw.length > 20){\r\n      return false;\r\n    }\r\n    // 공백 체크\r\n    if(pw.search(/₩s/) != -1){\r\n      return false;\r\n    }\r\n    // 영문/숫자/특수문자 중 택2\r\n    // if ( (num < 0 && eng < 0) || (eng < 0 && spe < 0) || (spe < 0 && num < 0) ){\r\n    //   return false;\r\n    // }\r\n\r\n    // 영문/숫자/특수문자 필수\r\n     if (num < 0 && eng < 0 && spe < 0){\r\n       return false;\r\n     }\r\n    return true;\r\n  },\r\n  // 날짜\r\n  isDate: function (input: any) {\r\n    let regExp = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/;\r\n    return regExp.test(input);\r\n  },\r\n  isDateWithTime: function (input: any) {\r\n    let regExp = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/;\r\n    let regExp2 = /^(20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])\\s([1-9]|[01][0-9]|2[0-3]):([0-5][0-9])$/;\r\n    return regExp.test(input) || regExp2.test(input);\r\n  },\r\n  isEmpty: function (value: any) {\r\n    return ( value == \"\" || value == null || value == undefined || ( value != null && typeof value == \"object\" && !Object.keys(value).length ) )\r\n  },\r\n  toMoneyFormat: function(amount: string): string {\r\n    amount = amount || '';\r\n    let parts = amount.split(\".\");\r\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\r\n  }\r\n};\r\n\r\n"],"sourceRoot":""}]}