'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Styles

// Components

// Mixins

// Utils


require('../../../src/stylus/components/_radios.styl');

var _VIcon = require('../VIcon');

var _VIcon2 = _interopRequireDefault(_VIcon);

var _VLabel = require('../VLabel');

var _VLabel2 = _interopRequireDefault(_VLabel);

var _colorable = require('../../mixins/colorable');

var _colorable2 = _interopRequireDefault(_colorable);

var _rippleable = require('../../mixins/rippleable');

var _rippleable2 = _interopRequireDefault(_rippleable);

var _themeable = require('../../mixins/themeable');

var _themeable2 = _interopRequireDefault(_themeable);

var _registrable = require('../../mixins/registrable');

var _helpers = require('../../util/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* @vue/component */
exports.default = {
    name: 'v-radio',
    mixins: [_colorable2.default, _rippleable2.default, (0, _registrable.inject)('radio', 'v-radio', 'v-radio-group'), _themeable2.default],
    inheritAttrs: false,
    props: {
        color: {
            type: [Boolean, String],
            default: 'accent'
        },
        disabled: Boolean,
        label: String,
        onIcon: {
            type: String,
            default: '$vuetify.icons.radioOn'
        },
        offIcon: {
            type: String,
            default: '$vuetify.icons.radioOff'
        },
        readonly: Boolean,
        value: null
    },
    data: function data() {
        return {
            isActive: false,
            isFocused: false,
            parentError: false
        };
    },
    computed: {
        classes: function classes() {
            var classes = {
                'v-radio--is-disabled': this.isDisabled,
                'v-radio--is-focused': this.isFocused,
                'theme--dark': this.dark,
                'theme--light': this.light
            };
            if (!this.parentError && this.isActive) {
                return this.addTextColorClassChecks(classes);
            }
            return classes;
        },
        classesSelectable: function classesSelectable() {
            return this.addTextColorClassChecks({}, this.isActive ? this.color : this.radio.validationState || false);
        },
        computedIcon: function computedIcon() {
            return this.isActive ? this.onIcon : this.offIcon;
        },
        hasState: function hasState() {
            return this.isActive || !!this.radio.validationState;
        },
        isDisabled: function isDisabled() {
            return this.disabled || !!this.radio.disabled;
        },
        isReadonly: function isReadonly() {
            return this.readonly || !!this.radio.readonly;
        }
    },
    mounted: function mounted() {
        this.radio.register(this);
    },
    beforeDestroy: function beforeDestroy() {
        this.radio.unregister(this);
    },

    methods: {
        genInput: function genInput(type, attrs) {
            var _this = this;

            return this.$createElement('input', {
                attrs: Object.assign({}, attrs, {
                    'aria-label': this.label,
                    name: this.radio.name || false,
                    role: type,
                    type: type,
                    checked: this.isActive
                }),
                on: {
                    blur: this.onBlur,
                    change: this.onChange,
                    focus: this.onFocus,
                    keydown: function keydown(e) {
                        if ([_helpers.keyCodes.enter, _helpers.keyCodes.space].includes(e.keyCode)) {
                            e.preventDefault();
                            _this.onChange();
                        }
                    }
                },
                ref: 'input'
            });
        },
        genLabel: function genLabel() {
            return this.$createElement(_VLabel2.default, {
                on: { click: this.onChange },
                attrs: {
                    for: this.id
                },
                props: {
                    color: this.radio.validationState || false,
                    focused: this.hasState
                }
            }, this.$slots.label || this.label);
        },
        genRadio: function genRadio() {
            return this.$createElement('div', {
                staticClass: 'v-input--selection-controls__input'
            }, [this.genInput('radio', _extends({
                'aria-checked': this.isActive.toString()
            }, this.$attrs)), !this.isDisabled && this.genRipple({
                'class': this.classesSelectable
            }), this.$createElement(_VIcon2.default, {
                'class': this.classesSelectable
            }, this.computedIcon)]);
        },
        onFocus: function onFocus() {
            this.isFocused = true;
        },
        onBlur: function onBlur(e) {
            this.isFocused = false;
            this.$emit('blur', e);
        },
        onChange: function onChange() {
            if (this.isDisabled || this.isReadonly) return;
            if (!this.isDisabled && (!this.isActive || !this.radio.mandatory)) {
                this.$emit('change', this.value);
            }
        }
    },
    render: function render(h) {
        return h('div', {
            staticClass: 'v-radio',
            class: this.classes
        }, [this.genRadio(), this.genLabel()]);
    }
};
//# sourceMappingURL=VRadio.js.map